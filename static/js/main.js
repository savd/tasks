// Generated by CoffeeScript 1.3.3
(function() {
  var delegates_add, delegates_del, delegates_update, init, tasks_add, tasks_cancel_edit, tasks_del, tasks_edit, tasks_edit_save, tasks_update;

  $(document).onReady(function() {
    return init();
  });

  init = function() {
    var resize_input;
    tasks_update();
    delegates_update();
    $('tasks_add_task').setValue('');
    resize_input = function() {
      var height;
      height = $('tasks_add_task').value().split(/\n/).length * 19 + 18;
      return $('tasks_add_task').setHeight(height > 51 ? height : void 0);
    };
    $('tasks_add_task').on('enter', resize_input);
    $('tasks_add_task').on('backspace', resize_input);
    $('tasks_add_task').on('shift+enter', tasks_add);
    return $('delegates_add').on('enter', function(e) {
      return delegates_add(e);
    });
  };

  tasks_add = function() {
    return Xhr.load('/tasks/add', {
      method: 'POST',
      params: {
        task: $('tasks_add_task').value().replace(/\n/g, "<br>")
      },
      onSuccess: function() {
        $('tasks').fire('tasks_changed');
        return $('tasks_add_task').setValue('');
      }
    });
  };

  tasks_update = function() {
    return Xhr.load('/tasks/show', {
      onSuccess: function() {
        $('tasks').update(this.text);
        $('tasks_add_task').setWidth($$('div#tasks > table')[0].get('clientWidth'));
        $('tasks').stopObserving('tasks_changed').on('tasks_changed', tasks_update);
        $('tasks').find('a.del').forEach(function(el) {
          return el.stopObserving('click').on('click', function(e) {
            return tasks_del(e);
          });
        });
        return $('tasks').find('td.task_body').forEach(function(el) {
          return el.stopObserving('dblClick').on('dblclick', function(e) {
            return tasks_edit(e);
          });
        });
      }
    });
  };

  tasks_del = function(e) {
    e.preventDefault();
    return Xhr.load("/tasks/del/" + (e.target.get('rel')), {
      method: 'POST',
      onSuccess: function() {
        return $('tasks').fire('tasks_changed');
      }
    });
  };

  tasks_edit = function(e) {
    if ($('tasks_inline_edit')) {
      $('tasks_inline_edit').parent().update("<span>" + ($('tasks_inline_edit').value()) + "</span>");
    }
    return Xhr.load("/tasks/inline_edit/" + (e.target.get('rel')), {
      method: 'POST',
      onSuccess: function() {
        e.target.parent().update(this.text);
        $('tasks_inline_edit').stopObserving('shift+enter').on('shift+enter', function(e) {
          return tasks_edit_save(e);
        });
        $('tasks_inline_edit').stopObserving('esc').on('esc', function(e) {
          return tasks_cancel_edit(e);
        });
        $('tasks_inline_edit').setValue(e.target.get('innerHTML').replace(/<br>/g, "\n").trim());
        $('tasks_inline_edit').setWidth($('tasks_inline_edit').parent().get('clientWidth'));
        return $('tasks_inline_edit').focus();
      }
    });
  };

  tasks_cancel_edit = function(e) {
    if (e) {
      e[0].preventDefault();
    }
    return tasks_update();
  };

  tasks_edit_save = function(e) {
    if ($('tasks_inline_edit').value() === "") {
      $('debug').update('Empty values not allowed!');
      return 0;
    }
    console.log($('tasks_inline_edit').value().replace(/\n/, "<br>"));
    return Xhr.load("/tasks/save/" + (e[0].target.get('rel')), {
      method: 'POST',
      params: {
        body: $('tasks_inline_edit').value().replace(/\n/g, "<br>")
      },
      onSuccess: function() {
        return $('tasks').fire('tasks_changed');
      }
    });
  };

  delegates_add = function(e) {
    e[0].preventDefault();
    return Xhr.load('/delegates/add', {
      method: 'POST',
      params: {
        value: $('delegates_add').value().trim()
      },
      onSuccess: function() {
        $('delegates').fire('changed');
        return $('delegates_add').value('');
      }
    });
  };

  delegates_update = function() {
    return Xhr.load('/delegates/show', {
      onSuccess: function() {
        $('delegates').update(this.text);
        $('delegates').stopObserving('changed').on('changed', delegates_update);
        return $('delegates').find('a.del').forEach(function(el) {
          return el.stopObserving('click').on('click', function(e) {
            return delegates_del(e);
          });
        });
      }
    });
  };

  delegates_del = function(e) {
    e.preventDefault();
    return Xhr.load("/delegates/del/" + (e.target.get('rel')), {
      method: 'POST',
      onSuccess: function() {
        return $('delegates').fire('changed');
      }
    });
  };

}).call(this);
